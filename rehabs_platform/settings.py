"""
Django settings for rehabs_platform project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from  rehabs_platform.secret import MY_SECRET_KEY

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = MY_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'django_cleanup.apps.CleanupConfig',
    'admin_reorder',
    
    # Local apps
    'core.apps.CoreConfig',
    'facilities.apps.FacilitiesConfig',
    'staff.apps.StaffConfig',
    'users.apps.UsersConfig',
    'blog.apps.BlogConfig',
    'requests.apps.RequestsConfig',
    'medical_services.apps.MedicalServicesConfig',
    'reviews.apps.ReviewsConfig',
    'recovery_stories.apps.RecoveryStoriesConfig',
    'admin_logs.apps.AdminLogsConfig',
    'content.apps.ContentConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Кастомные middleware для логирования
    'core.middleware.RequestLoggingMiddleware',
    'core.middleware.SecurityMiddleware',
    'core.middleware.DatabaseLoggingMiddleware',
    
    # Admin reorder middleware (должен быть последним)
    'admin_reorder.middleware.ModelAdminReorder',
]

ROOT_URLCONF = 'rehabs_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'content.context_processors.site_content',
                'medical_services.context_processors.service_categories',
                'medical_services.context_processors.footer_services',
                'core.context_processors.geo_data',
            ],
        },
    },
]

WSGI_APPLICATION = 'rehabs_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.User'

# Создание папки logs если её нет
import os
logs_dir = BASE_DIR / 'logs'
if not logs_dir.exists():
    logs_dir.mkdir(exist_ok=True)

# Настройки для системы логирования
ADMIN_LOGS = {
    'ENABLE_LOGGING': True,
    'LOG_IP_ADDRESS': True,
    'LOG_USER_AGENT': True,
    'LOG_ACCESS_LEVEL': True,
    'EXCLUDE_MODELS': [
        'admin_logs.AdminActionLog',
        'auth.Group',
        'auth.Permission',
    ],
    'INCLUDE_MODELS': [
        'blog.*',
        'recovery_stories.*',
        'requests.*',
        'facilities.*',
        'staff.*',
        'content.*',
    ],
}

# Настройки для системы доступа
ACCESS_CONTROL = {
    'DEFAULT_ACCESS_LEVEL': 'content_admin',
    'SUPERUSER_ACCESS_LEVEL': 'superuser',
    'ENABLE_TEMPORARY_ACCESS': True,
    'DEFAULT_ACCESS_DURATION': 30,  # дней
}

# Настройки для изменения порядка приложений в админке
ADMIN_REORDER = (
    # Заявки
    {'app': 'requests', 'label': 'Заявки', 'models': (
        {'model': 'requests.AnonymousRequest', 'label': 'Анонимные заявки'},
        {'model': 'requests.DependentRequest', 'label': 'Заявки от зависимых'},
        {'model': 'requests.RequestTemplate', 'label': 'Шаблоны заявок'},
        {'model': 'requests.RequestNote', 'label': 'Заметки к заявкам'},
        {'model': 'requests.DependentRequestNote', 'label': 'Заметки к заявкам от зависимых'},
        {'model': 'requests.RequestStatusHistory', 'label': 'История статусов'},
        {'model': 'requests.DependentRequestStatusHistory', 'label': 'История статусов заявок от зависимых'},
        {'model': 'requests.RequestActionLog', 'label': 'Логи действий заявок'},
    )},
    
    # Учреждения
    {'app': 'facilities', 'label': 'Учреждения', 'models': (
        {'model': 'facilities.RehabCenter', 'label': 'Реабилитационные центры'},
        {'model': 'facilities.Clinic', 'label': 'Клиники'},
        {'model': 'facilities.PrivateDoctor', 'label': 'Частные врачи'},
        {'model': 'facilities.OrganizationType', 'label': 'Типы организаций'},
        {'model': 'facilities.FacilityDocument', 'label': 'Документы учреждений'},
        {'model': 'facilities.FacilityImage', 'label': 'Изображения учреждений'},
    )},
    
    # Медицинские услуги
    {'app': 'medical_services', 'label': 'Медицинские услуги', 'models': (
        {'model': 'medical_services.ServiceCategory', 'label': 'Категории услуг'},
        {'model': 'medical_services.Service', 'label': 'Услуги'},
        {'model': 'medical_services.FacilityService', 'label': 'Услуги учреждений'},
    )},
    
    # Персонал
    {'app': 'staff', 'label': 'Персонал', 'models': (
        {'model': 'staff.FacilitySpecialist', 'label': 'Специалисты учреждений'},
        {'model': 'staff.Specialization', 'label': 'Специализации'},
        {'model': 'staff.SpecialistDocument', 'label': 'Документы специалистов'},
    )},
    
    # Истории выздоровления
    {'app': 'recovery_stories', 'label': 'Истории выздоровления', 'models': (
        {'model': 'recovery_stories.RecoveryStory', 'label': 'Истории выздоровления'},
        {'model': 'recovery_stories.RecoveryCategory', 'label': 'Категории историй'},
        {'model': 'recovery_stories.RecoveryTag', 'label': 'Теги историй'},
        {'model': 'recovery_stories.RecoveryStoryImage', 'label': 'Изображения историй'},
    )},
    
    # Контент
    {'app': 'content', 'label': 'Контент', 'models': (
        {'model': 'content.Banner', 'label': 'Баннеры'},
        {'model': 'content.SiteSettings', 'label': 'Настройки сайта'},
    )},
    
    # Блог и статьи
    {'app': 'blog', 'label': 'Блог', 'models': (
        {'model': 'blog.BlogCategory', 'label': 'Категории блога'},
        {'model': 'blog.BlogPost', 'label': 'Посты блога'},
        {'model': 'blog.Tag', 'label': 'Теги'},
        {'model': 'blog.BlogPostTag', 'label': 'Теги постов'},
        {'model': 'blog.ContentCategory', 'label': 'Категории контента'},
        {'model': 'blog.Article', 'label': 'Статьи'},
        {'model': 'blog.ArticleTag', 'label': 'Теги статей'},
    )},
    
    # Отзывы
    {'app': 'reviews', 'label': 'Отзывы', 'models': (
        {'model': 'reviews.Review', 'label': 'Отзывы'},
    )},
    
    # Пользователи
    {'app': 'users', 'label': 'Пользователи', 'models': (
        {'model': 'users.User', 'label': 'Пользователи'},
        {'model': 'users.UserProfile', 'label': 'Профили пользователей'},
        {'model': 'users.UserActionLog', 'label': 'Логи действий пользователей'},
    )},
    
    # Система
    {'app': 'admin_logs', 'label': 'Система', 'models': (
        {'model': 'admin_logs.AdminActionLog', 'label': 'Логи действий администраторов'},
        {'model': 'admin_logs.UserAccess', 'label': 'Доступы пользователей'},
        {'model': 'admin_logs.AccessLevel', 'label': 'Уровни доступа'},
        {'model': 'admin_logs.AppPermission', 'label': 'Разрешения приложений'},
    )},
    
    # Ядро
    {'app': 'core', 'label': 'Ядро', 'models': (
        {'model': 'core.City', 'label': 'Города'},
        {'model': 'core.Region', 'label': 'Регионы'},
        {'model': 'core.CityCoordinates', 'label': 'Координаты городов'},
    )},
    
    # Django стандартные приложения
    {'app': 'auth', 'label': 'Аутентификация', 'models': (
        {'model': 'auth.Group', 'label': 'Группы'},
        {'model': 'auth.Permission', 'label': 'Разрешения'},
    )},
)

# JSON сериализация - используем кастомный энкодер
import json
from facilities.utils import CustomJSONEncoder
json._default_encoder = CustomJSONEncoder()

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@rehabs-platform.com'

# Email адреса администраторов для уведомлений
ADMIN_EMAILS = [
    'admin@rehabs-platform.com',
    # Добавьте реальные email адреса администраторов
]

# URL сайта для email-шаблонов
SITE_URL = 'http://localhost:8000'  # Изменить на реальный URL при деплое

# Настройки для продакшена (раскомментировать при деплое)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.yandex.ru'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@yandex.ru'
# EMAIL_HOST_PASSWORD = 'your-app-password'

# Настройки логирования
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file_general': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'general.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,  # Храним 30 дней
            'formatter': 'verbose',
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'errors.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'file_security': {
            'level': 'WARNING',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'file_business': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'business.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'json',
        },
        'file_performance': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'performance.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'json',
        },
        'file_database': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'database.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'json',
        },
        'file_requests': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'requests.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file_general'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['file_security'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file_database'],
            'level': 'INFO',
            'propagate': False,
        },
        # Кастомные логгеры
        'business': {
            'handlers': ['file_business'],
            'level': 'INFO',
            'propagate': False,
        },
        'security': {
            'handlers': ['file_security'],
            'level': 'WARNING',
            'propagate': False,
        },
        'performance': {
            'handlers': ['file_performance'],
            'level': 'INFO',
            'propagate': False,
        },
        'errors': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'database': {
            'handlers': ['file_database'],
            'level': 'INFO',
            'propagate': False,
        },
        'requests': {
            'handlers': ['file_requests'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file_general'],
        'level': 'INFO',
    },
}
