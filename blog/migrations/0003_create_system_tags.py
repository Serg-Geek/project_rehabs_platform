# Generated by Django 5.1.8 on 2025-01-27 15:30

from django.db import migrations


def create_system_tags(apps, schema_editor):
    """
    Создает системные теги для блога.
    
    Системные теги отображаются с иконками в интерфейсе и используются
    для категоризации статей и постов.
    """
    Tag = apps.get_model('blog', 'Tag')
    
    # Словарь системных тегов с описаниями
    system_tags_data = {
        'profilaktika-i-preduprezhdenie': {
            'name': 'Профилактика и предупреждение',
            'description': 'Материалы по профилактике зависимостей и предупреждению рецидивов',
            'icon': 'deps/icons/articles_tags_icons/prevention-icon.svg'
        },
        'yuridicheskaya-konsultatsiya': {
            'name': 'Юридическая консультация',
            'description': 'Правовые вопросы, связанные с зависимостями и реабилитацией',
            'icon': 'deps/icons/articles_tags_icons/justice-hammer-icon.svg'
        },
        'psihiatriya': {
            'name': 'Психиатрия',
            'description': 'Психиатрические аспекты лечения зависимостей',
            'icon': 'deps/icons/articles_tags_icons/psychiatrist-icon.svg'
        },
        'psihologiya': {
            'name': 'Психология',
            'description': 'Психологические методы лечения и поддержки',
            'icon': 'deps/icons/articles_tags_icons/psychologist-icon.svg'
        },
        'rodstvennikam': {
            'name': 'Родственникам',
            'description': 'Информация для родственников зависимых людей',
            'icon': 'deps/icons/articles_tags_icons/clients-icon.svg'
        },
        'narkomaniya': {
            'name': 'Наркомания',
            'description': 'Материалы по лечению наркотической зависимости',
            'icon': 'deps/icons/articles_tags_icons/medicine-icon.svg'
        },
        'alkogolizm': {
            'name': 'Алкоголизм',
            'description': 'Материалы по лечению алкогольной зависимости',
            'icon': 'deps/icons/articles_tags_icons/alcohol-icon.svg'
        },
    }
    
    created_count = 0
    
    for slug, data in system_tags_data.items():
        tag, created = Tag.objects.get_or_create(
            slug=slug,
            defaults={
                'name': data['name'],
                'description': data['description'],
                'icon': data['icon'],
                'is_system': True,
                'is_active': True
            }
        )
        
        if created:
            created_count += 1
            print(f"✓ Создан системный тег: {data['name']}")
        else:
            # Обновляем существующий тег, если данные изменились
            if (tag.name != data['name'] or 
                tag.description != data['description'] or 
                tag.icon != data['icon'] or 
                not tag.is_system or 
                not tag.is_active):
                
                tag.name = data['name']
                tag.description = data['description']
                tag.icon = data['icon']
                tag.is_system = True
                tag.is_active = True
                tag.save()
                print(f"↻ Обновлен системный тег: {data['name']}")
    
    print(f"Системные теги инициализированы: создано {created_count} тегов")


def reverse_create_system_tags(apps, schema_editor):
    """
    Удаляет системные теги (для отката миграции).
    """
    Tag = apps.get_model('blog', 'Tag')
    
    # Удаляем только системные теги
    deleted_count = Tag.objects.filter(is_system=True).delete()[0]
    print(f"Удалено {deleted_count} системных тегов")


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0002_blogpost_is_featured'),
    ]

    operations = [
        migrations.RunPython(create_system_tags, reverse_create_system_tags),
    ]
